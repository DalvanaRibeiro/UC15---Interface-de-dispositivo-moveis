// Importando hooks
import{useEffect, useState} from 'react'
import{ View, Text, FlatList, StyleSheet, Pressable, TextInput, ActivityIndicator} from 'react-native'
import { useRouter } from 'expo-router'

// Define o tipo do objeto Usuario com os campos que usaremos
type Usuario = {
  id: number 
  name: string
}
// Componente principal da tela de busca dos usu치rios
export default function TelaBusca(){
  // Estado para armazenar a lista de usu치rios obtidos da API
  const [usuario, setUsuario] = useState<Usuario[]>([])
  // Estado para armazenar o texto digitado no filtro de busca
  const[filtro, setFiltro] = useState('')
  // Estado que indica se os dados ainda est칚o carregando
  const[carregando, setCarregando] = useState(true)
  // Hook do Expo Router para navegar entre telas
  const router = useRouter()
  // Fun칞칚o para buscar os usu치rios na API externa
  const buscarUsuarios = () => {
    setCarregando(true) // Marca o in칤cio do carregamento
    fetch('https://jsonplaceholder.typicode.com/users') // Faz a requisi칞칚o para a API
    .then(res => res.json()) // converte a resposta para JSON
    .then( dados => {
      setUsuario(dados) // Atualiza o estado com a lista de usu치rios recebida
      setCarregando(false) // Finaliza o carregamento
    })
  }
  // useEffect executa a fun칞칚o buscarUsuarios uma vez, ao montar o componente
  useEffect(() => {
    buscarUsuarios()
  }, [])
  // Cria uma nova lista filtrando os usu치rios cujo o nome cont칠m o texto digitado  (iginorando mai칰scula/min칰scula)
  const usuariosFiltrados = usuario.filter( u => u.name.toLocaleLowerCase().includes(filtro.toLocaleLowerCase())
)
// Se estiver carregando, exibe um indicador e mensagem de carregamento
if(carregando){
  return(
    <View style={estilos.container}>
      {/* Spinner de carregamento com cor azul escuro */}
      <ActivityIndicator size="large" color="#0D47A1" />
      {/* Texto informando que os usu치rios est칚o sendo carregados */}
      <Text style={estilos.carregandoTexto}> Carregando usu치rios...
        </Text>
    </View>
  )
}
// Quando os dados j치 estiverem carregados, exibe a tela pricipal
return(
  <View style={estilos.container}>
    {/* T칤tulo da tela */}
    <Text style={estilos.titulo}> 游댍 Buscar Usu치rio </Text>
    {/* Campo de texto para digitar o filtro (nome do usu치rio)*/}
    <TextInput
    placeholder='Digite um nome' 
    value={filtro} // Valor atual do campo (estado de filtro)
    onChangeText={setFiltro}  // Atualizar o estado de filtro ao digitar
    style={estilos.input}     // Estilos aplicaado ao campo
    placeholderTextColor="#90CAF9"/>
    {/* Lista que renderiza os usu치rios filtrados */}
    <FlatList
    data={usuariosFiltrados}  // Dados que ser칚o exibidos na lista
    keyExtractor={item => item.id.toString()} // Chave 칰nica para cada item (ID convertodo em string)
    renderItem={({item}) => (   // Fun칞칚o que renderiza cada item da lista
    <Pressable
    onPress={() =>
      // Ao clicar no usu치rio, navega para a tela de detalhes enviando o id como par칙metro
      router.push({
        pathname: '/(tabs)/screens/usuarioApi',
        params: {id: item.id.toString()},
      })
    }  
    style={estilos.card} // Card que envolve o nome do usu치rio
    >
      {/* Texto exibindo o nome do usu치rio */}
      <Text style={estilos.nome}> 游놌 {item.name}</Text>
    </Pressable>
    )}
    />
  </View>
)
}
// Defini칞칚o dos estilos
const estilos = StyleSheet.create({
  container: {
    flex: 1,
    padding:16,
    backgroundColor: '#E3F2FD',
  },
  titulo:{
    fontSize: 20,
    fontWeight: 'bold',
    color: '#0D47A1',
    marginBottom: 10,
  },
  input:{
    backgroundColor: '#FFFFFF',
    borderColor: '#64B5F6',
    borderWidth: 1,
    borderRadius: 8,
    padding: 10,
    marginBottom: 16,
    color: '#0DA7A1',
  },
  card:{
    backgroundColor: '#BBDEFB',
    padding: 12,
    marginBottom: 10,
    borderRadius: 8,
  },
  nome:{
    fontSize: 18,
    color: '#0D47A1',
  },
  carregandoTexto:{
    marginTop: 10,
    color: '#0D47A1',
  }
})
